koa 入口文件： koa/lib/application.js
koa.use 引用了 koa-convert包，
	koa-convert 主要对非async的函数进行co包装
koa 构造函数中的 Object.create(request/response/context) 分别引用的koa/lib/下面的同名文件，
	context中主要包含的是上下文的proto类，需要用object.create进行构造，其中开了req和res的口子，让request和resopnse挂上
koa.createContext 创建了上下文环境
koa.listen 的callback函数引用了koa-compose，
	koa-compose 主要对中间件的数组进行整理，让next指向下一个中间件

koa-router

methods.forEach 对http的请求方法进行注册操作
Router.use 主要是用于对中间件的注册，主要用于顺序执行中间件，同时参数也可以是router+middleware的形式，支持一个路由多个中间件
Router.prefix 为路径添加统一前缀
Router.register(path, methods, middleware, opts) 注册路由

做这个项目的意义：
1.拆分开koa-router的router和controller，分别用一个js文件（router.js和controller/index.js）进行管理，分开管理router和controller，
让这两部分的分工更加明确
2.重新定义router，单独拎出来一级路由和其他路由，为一级路由开辟单独的workspace。更加适合大型项目选型
3.重点放在router和controller中，弱化view和model层，架构会拆分开一级路由，而一级路由里面的整体架构这个项目不会care，给每个一级路由更大的自主权
4.重构koa.use方法，删掉koa-convert包引用，为将要到来的node v8.x的lts做准备
5.扩展koa-router,底层加入router数组和controller数组对中间件的注册绑定进行管理，而外部暴露出来的增删改查均和配置文件的key有关，人为无法直接
对底层的数组进行操作，只能通过key来操作与绑定中间件
6.每个一级路由下分别有各自的router和controller配置文件，团队负责不同路由下面页面开发时互不干扰。
7.koa底层加入rpc调用并维护一个公用的数据json，作为每个一级路由公用数据调用通道
8.本项目剥离业务层，所以本地环境对debug-log的支持仅限于controller，router和底层均用assert直接抛出
9.项目完成后，会加入cli构建，开发过程中每个模块的代码均需要在test/目录下写测试用例

文件目录
root----koasConfig.js(config文件)
      |--test/(测试用例)
      | |--test.js(测试入口文件)
      | |--list/(一级路由的一级文件夹)
      | | |--controller/(controller文件夹)
      | | | |--index.js(总管一级路由下controller的文件)
      | | | |--other.js(其他的路由文件，一个路由对应一个文件)
      | | |--router.js(一级路由下面的二级~n级路由管理文件)
      | |--movie/(同上)
      | |--koasConfig.js(测试用的config文件)
      |--routes/(封装的koa-router)
      |--deps/(插件)
      |--index.js(入口文件)
